# double quoted strings

<%= "variable: $var" %>
<%= "array access: $a[1]" %>
<%= "deref array access: $a->[1] $a->[-1] $b->[1][1] $c->[1]->[1]" %>
<%= "hash access: $var{b}" %>
<%= "deref hash access: $var->{b} $var2->{a}{b} $var3->{a}->{b}" %>
<%= "mixed deref hash and array access: $var1->{a}[1] $var2->{a}->[1] $var3->[1]{a} $var4->[1]->{a}" %>
<%= "dereferenced scalar reference ${\($a + 2)}" %>
<%= "dereferenced arary reference @{['a' . 'b']}" %>
<%= "interpolated package variable $Foo::Package::var" %>

==>

Template(
    TextInterpolation(MojoStart),
    ExpressionStatement(StringDoubleQuoted(InterpolatedStringContent, ScalarVariable)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(InterpolatedStringContent, ArrayAccessVariable(ScalarVariable, "[", Integer, "]"))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            InterpolatedStringContent,
            ArrayAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            ArrayAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                ArrowOperator,
                "[",
                Integer,
                "]"
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(InterpolatedStringContent, HashAccessVariable(ScalarVariable, "{", Identifier, "}"))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent,
            HashAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                "{",
                Identifier,
                "}"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                ArrowOperator,
                "{",
                Identifier,
                "}"
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            ArrayAccessVariable(
                HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
                ArrowOperator,
                "[",
                Integer,
                "]"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                "{",
                Identifier,
                "}"
            ),
            InterpolatedStringContent,
            HashAccessVariable(
                ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", Integer, "]"),
                ArrowOperator,
                "{",
                Identifier,
                "}"
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringDoubleQuoted(
            InterpolatedStringContent,
            PackageVariable(PackageName(ScalarVariable, "::", Identifier), "::", PackageVariableName(Identifier))
        )
    ),
    TextInterpolation(MojoEnd)
)

# backtick quoted commands

% `echo "value is $var"`;
% `echo "array access: $a[1]"`;
% `echo "deref array access: $a->[-1]"`;
% `echo "hash access: $var{b}"`;
% `echo "deref hash access: $var->{b}"`;
% `echo "dereferenced scalar reference ${\($a + 2)}"`;
% `echo "dereferenced array reference @{['a' . 'b']}"`;

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(InterpolatedStringContent, ScalarVariable, InterpolatedStringContent),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
            InterpolatedStringContent
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            InterpolatedStringContent
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
            InterpolatedStringContent
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            ),
            InterpolatedStringContent
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BacktickQuoted(
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            ),
            InterpolatedStringContent
        ),
        ";"
    )
)

# q quoted strings

<%= q/abc/ %>
<%= q!a b c! %>
<%= q abcda %>
<%= q(ab(cd(ef))) %>
<%= q/a b\/c d/ %>
<%= q # this is a comment
    # this is another comment
    (abc); %>
<%= q{} %>

==>

Template(
    TextInterpolation(MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQQuoted(q, Comment, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        ";"
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQQuoted(q, QuoteLikeStartDelimiter, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd)
)

# qq quoted strings

<%= qq/variable: $var/ %>
<%= qq{array access: $a[1]} %>
<%= qq!deref array access: $a->[-1]! %>
<%= qq/hash access: $var{b}/ %>
<%= qq[deref hash access: $var->{b};] %>
<%= qq<dereferenced scalar reference ${\($a + 2)}> %>
<%= qq(dereferenced array reference @{['a' . 'b']}) %>
<%= qq[ab[c]d] %>
<%= qq # Comment
    # another Comment
    (content $var more) %>
<%= qq{} %>

==>

Template(
    TextInterpolation(MojoStart),
    ExpressionStatement(
        StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, ScalarVariable, QuoteLikeEndDelimiter)
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            ),
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            ),
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQqQuoted(qq, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarVariable,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(StringQqQuoted(qq, QuoteLikeStartDelimiter, QuoteLikeEndDelimiter)),
    TextInterpolation(MojoEnd)
)

# qw lists

<%= qw/a b c/ %>
<%= qw!a b c! %>
<%= qw a b c d a %>
<%= qw(a b(c d (e f))) %>
<%= qw/a b\/c d/ %>
<%= qw  # this is a comment
    # this is another comment
    (a b c) %>

==>

Template(
    TextInterpolation(MojoStart),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        QWList(
            qw,
            QWListContent(
                QuoteLikeStartDelimiter,
                QWElement,
                QWElement,
                QWElement,
                QWElement,
                QWElement,
                QuoteLikeEndDelimiter
            )
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        QWList(qw, QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter))
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        QWList(
            qw,
            Comment,
            Comment,
            QWListContent(QuoteLikeStartDelimiter, QWElement, QWElement, QWElement, QuoteLikeEndDelimiter)
        )
    ),
    TextInterpolation(MojoEnd)
)

# qx commands

% qx/echo "value is $var"/;
% qx{echo "array access: $a[1]"};
% qx!echo "deref array access: $a->[-1]"!;
% qx/echo "hash access: $var{b}"/;
% qx[echo "deref hash access: $var->{b}"];
% qx<echo "dereferenced scalar reference ${\($a + 2)}">;
% qx(echo "dereferenced array reference @{['a' . 'b']}");
% qx'echo "uninterpolated contents $var"';
% qx # Comment
%     {echo "hello"};

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarVariable,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, "[", Integer, "]"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayAccessVariable(ScalarVariable, ArrowOperator, "[", ArithOp, Integer, "]"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, "{", Identifier, "}"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            HashAccessVariable(ScalarVariable, ArrowOperator, "{", Identifier, "}"),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarDereference(
                "$",
                "{",
                UnaryExpression(RefOp, List("(", BinaryExpression(ScalarVariable, ArithOp, Integer), ")")),
                "}"
            ),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(
            qx,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ArrayDereference(
                "@",
                "{",
                ArrayRef("[", BinaryExpression(StringSingleQuoted, ConcatOp, StringSingleQuoted), "]"),
                "}"
            ),
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        CommandQxQuoted(qx, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(Constant(Identifier)),
    Comment,
    TextInterpolation(Text, MojoSingleStart),
    StandaloneBlock(
        Block(
            "{",
            ExpressionStatement(
                CallExpression(FunctionName(Identifier), Arguments(StringDoubleQuoted(InterpolatedStringContent)))
            ),
            "}"
        ),
        ";"
    )
)

# pattern matching regular expressions

% m/([+-]?\d+)/g;
% m'([+-]?\d+)'g;
<% m # comment
    '([+-]?\d+)'g; %>
% $var =~ /([+-]?\d+)/;
% $var =~ /foo/gi;
% $var =~ /\//g;
% m/\//g;
% /^${var}a$/;

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        PatternMatchM(
            m,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            EscapeSequence,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        PatternMatchM(m, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        ";"
    ),
    TextInterpolation(Text, MojoStart),
    ExpressionStatement(
        PatternMatchM(m, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        ";"
    ),
    TextInterpolation(MojoEnd, Text, MojoSingleStart),
    ExpressionStatement(
        BinaryExpression(
            ScalarVariable,
            BindingOp,
            PatternMatch("/", InterpolatedStringContent, EscapeSequence, InterpolatedStringContent, "/")
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BinaryExpression(ScalarVariable, BindingOp, PatternMatch("/", InterpolatedStringContent, "/", RegexOptions)),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        BinaryExpression(ScalarVariable, BindingOp, PatternMatch("/", EscapeSequence, "/", RegexOptions)),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        PatternMatchM(m, QuoteLikeStartDelimiter, EscapeSequence, QuoteLikeEndDelimiter, RegexOptions),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        PatternMatch("/", InterpolatedStringContent, ScalarVariable, InterpolatedStringContent, "/"),
        ";"
    )
)

# qr regular expressions

% qr/foo/i;
% qr'foo'i;
<% qr # comment
     'foo'i %>

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        RegexQr(qr, QuoteLikeStartDelimiter, InterpolatedStringContent, QuoteLikeEndDelimiter, RegexOptions),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        RegexQr(qr, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions),
        ";"
    ),
    TextInterpolation(Text, MojoStart),
    ExpressionStatement(
        RegexQr(qr, Comment, QuoteLikeStartDelimiter, StringContent, QuoteLikeEndDelimiter, RegexOptions)
    ),
    TextInterpolation(MojoEnd)
)

# substitution regular expressions

% s/foo$var\n/frog\n/;
% s#hello#bye#r;
% s'foo$var'frog';
% s{a{b}}{ab}r;
<% s # comment at beginning end of line
     # comment at beginning on next line
     {hello} # comment at middle end of line
     # comment at middle on next line
     {bye}r %>

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            ScalarVariable,
            EscapeSequence,
            QuoteLikeSeparatorDelimiter,
            InterpolatedStringContent,
            EscapeSequence,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeSeparatorDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        SubstitutionS(
            s,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        ),
        ";"
    ),
    TextInterpolation(Text, MojoStart),
    ExpressionStatement(
        SubstitutionS(
            s,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        )
    ),
    TextInterpolation(MojoEnd)
)

# transliterations

% tr/a/b/;
% y/a/b/;
<% tr # comment at beginning end of line
     # comment at beginning on next line
     {a} # comment at middle end of line
     # comment at middle on next line
     {b}cdsr %>
<% y # comment at beginning end of line
     # comment at beginning on next line
     {a} # comment at middle end of line
     # comment at middle on next line
     {b}cdsr %>

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        TransliterationTrOrY(
            tr,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        TransliterationTrOrY(
            y,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeSeparatorDelimiter,
            StringContent,
            QuoteLikeEndDelimiter
        ),
        ";"
    ),
    TextInterpolation(Text, MojoStart),
    ExpressionStatement(
        TransliterationTrOrY(
            tr,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        )
    ),
    TextInterpolation(MojoEnd, Text, MojoStart),
    ExpressionStatement(
        TransliterationTrOrY(
            y,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            Comment,
            Comment,
            QuoteLikeStartDelimiter,
            StringContent,
            QuoteLikeEndDelimiter,
            RegexOptions
        )
    ),
    TextInterpolation(MojoEnd)
)

# interpolation of special scalar variables

<%= qq(
     $"
     $$
     $0
     $1
     $2
     $<
     $>
     $;
     $]
     $^F
     $&
     $`
     $'
     $+
     @+
     @-
     ${^MATCH}
     $,
     $.
     $|
) %>

==>

Template(
    TextInterpolation(MojoStart),
    ExpressionStatement(
        StringQqQuoted(
            qq,
            QuoteLikeStartDelimiter,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            ArrayVariable,
            InterpolatedStringContent,
            ArrayVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            SpecialScalarVariable,
            InterpolatedStringContent,
            QuoteLikeEndDelimiter
        )
    ),
    TextInterpolation(MojoEnd)
)
