# mixed operations

% !$user_authen_module || $user_authen_module == 3;
% my $var = { expires  => time + 2, valid => 0 };
% my $var = Package->method($var);
% say $_ for grep { $_ ne 'a' } @array;
% ;

==>

Template(
    TextInterpolation(MojoSingleStart),
    ExpressionStatement(
        BinaryExpression(
            UnaryExpression(LogicOp, ScalarVariable),
            LogicOp,
            BinaryExpression(ScalarVariable, CompareOp, Integer)
        ),
        StatementEnd(";")
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            HashRef(
                "{",
                Pair(Identifier, FatComma, BinaryExpression(NoArgumentNamedUnaryOperator(time), ArithOp, Integer)),
                Comma,
                Pair(Identifier, FatComma, Integer),
                "}"
            )
        ),
        StatementEnd(";")
    ),
    TextInterpolation(Text, MojoSingleStart),
    ExpressionStatement(
        Assignment(
            VariableDeclaration(my, ScalarVariable),
            "=",
            MethodInvocation(
                Identifier,
                ArrowOperator,
                FunctionName(Identifier),
                ParenthesizedArguments("(", ScalarVariable, ")")
            )
        ),
        StatementEnd(";")
    ),
    TextInterpolation(Text, MojoSingleStart),
    SingleLineStatement(
        OutputFunction(say, ScalarVariable),
        for,
        Arguments(
            ArrayFunction(
                grep,
                Block("{", ExpressionStatement(BinaryExpression(ScalarVariable, ne, StringSingleQuoted)), "}"),
                ArrayVariable
            )
        ),
        StatementEnd(";")
    ),
    TextInterpolation(Text, MojoSingleStart),
    EmptyStatement(";")
)
